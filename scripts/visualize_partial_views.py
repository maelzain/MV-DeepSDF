#!/usr/bin/env python3
import sys, os
# allow imports from project root
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

"""
Visualize the partial point cloud views for a given instance.

This script takes an instance ID, finds the corresponding .npz file generated by
`generate_multi_sweep_data.py`, and saves each of the 6 partial views as a
separate .ply file. This is useful for debugging and for visualizing the
input to the reconstruction network.
"""

import argparse
import logging
import numpy as np
from pathlib import Path
import glob

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

def save_point_cloud_to_ply(points: np.ndarray, file_path: str):
    """
    Saves a numpy array of 3D points to a .ply file.

    Args:
        points (np.ndarray): A numpy array of shape (N, 3).
        file_path (str): The path to save the .ply file.
    """
    num_points = points.shape[0]
    header = [
        "ply",
        "format ascii 1.0",
        f"element vertex {num_points}",
        "property float x",
        "property float y",
        "property float z",
        "end_header"
    ]
    with open(file_path, 'w') as f:
        f.write('\n'.join(header) + '\n')
        np.savetxt(f, points, fmt='%.6f')
    logger.info(f"Saved point cloud to {file_path}")

def main():
    p = argparse.ArgumentParser(description="Visualize partial point cloud views by saving them as .ply files.")
    p.add_argument("--data_root", required=True, help="Directory containing the .npz files (e.g., dataa/MultiSweepPointClouds).")
    p.add_argument("--instance_id", required=True, help="The instance ID to visualize (e.g., '100715345ee54d7ae38b52b4ee9d36a3') or 'ALL' for all instances.")
    p.add_argument("--class_id", default="02958343", help="The class ID of the instance (default is 'car').")
    p.add_argument("--output_dir", default="./outputs/partial_views", help="Directory to save the output .ply files.")
    args = p.parse_args()

    output_dir = Path(args.output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)

    if args.instance_id == 'ALL':
        # Process all .npz files in data_root
        npz_files = glob.glob(str(Path(args.data_root) / f"{args.class_id}_*.npz"))
        for npz_path in npz_files:
            instance_id = Path(npz_path).stem.replace(f"{args.class_id}_", "")
            print(f"Processing {instance_id}")
            data = np.load(npz_path)
            key = 'point_cloud' if 'point_cloud' in data else 'point_clouds'
            if key not in data:
                print(f"Could not find 'point_cloud' or 'point_clouds' key in {npz_path}")
                continue
            point_clouds = data[key]
            for i in range(point_clouds.shape[0]):
                view_pc = point_clouds[i]
                output_ply_path = output_dir / f"{instance_id}_view_{i}.ply"
                save_point_cloud_to_ply(view_pc, str(output_ply_path))
        print(f"All views for all instances saved to: {output_dir.resolve()}")
    else:
        # Single instance mode (original)
        npz_filename = f"{args.class_id}_{args.instance_id}.npz"
        npz_path = Path(args.data_root) / npz_filename
        if not npz_path.exists():
            logger.error(f"Data file not found at: {npz_path}")
            sys.exit(1)
        logger.info(f"Loading data from {npz_path}...")
        data = np.load(npz_path)
        key = 'point_cloud' if 'point_cloud' in data else 'point_clouds'
        if key not in data:
            logger.error(f"Could not find 'point_cloud' or 'point_clouds' key in {npz_path}")
            sys.exit(1)
        point_clouds = data[key] # Shape (6, N, 3)
        logger.info(f"Found {point_clouds.shape[0]} views with {point_clouds.shape[1]} points each.")
        for i in range(point_clouds.shape[0]):
            view_pc = point_clouds[i]
            output_ply_path = output_dir / f"{args.instance_id}_view_{i}.ply"
            save_point_cloud_to_ply(view_pc, str(output_ply_path))
        logger.info(f"All views saved to: {output_dir.resolve()}")
        logger.info("You can now open these .ply files in a 3D viewer like MeshLab or CloudCompare.")

if __name__ == "__main__":
    main()